name: Publish Python Package

on:
  push:
    branches:
      - main
    tags:
      - 'v*'

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine python-semantic-release tomli

      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git

      - name: Get current version
        id: current-version
        run: |
          CURRENT_VERSION=$(python -c "import tomli; print(tomli.load(open('pyproject.toml', 'rb'))['project']['version'])")
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $CURRENT_VERSION"

      - name: Run semantic-release
        id: release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          semantic-release version
          semantic-release publish

      - name: Get new version
        id: new-version
        run: |
          NEW_VERSION=$(python -c "import tomli; print(tomli.load(open('pyproject.toml', 'rb'))['project']['version'])")
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "New version: $NEW_VERSION"

      - name: Build package
        if: steps.current-version.outputs.current_version != steps.new-version.outputs.new_version
        run: |
          rm -rf dist/ build/ *.egg-info/
          python -m build

      - name: Check package
        if: steps.current-version.outputs.current_version != steps.new-version.outputs.new_version
        run: |
          twine check dist/*

      - name: Publish to PyPI
        if: steps.current-version.outputs.current_version != steps.new-version.outputs.new_version
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        run: |
          python -m twine upload --verbose dist/*

      - name: Handle failure
        if: failure()
        run: |
          echo "::error::Failed to publish package to PyPI"
          exit 1 